@page "/library"
@inject IBookService BookService
@inject NavigationManager NavigationManager
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<h3>My Book Library</h3>

<div class="table-container">
    <div class="d-flex mb-3">
        <input type="text" class="form-control mr-2" placeholder="Search" @bind="searchTerm" />
        <button class="btn btn-secondary" @onclick="FilterBooks">Filter</button>
        <button class="btn btn-primary" @onclick=ToAddNew>Add New Book</button>
    </div>

    @if (Books == null)
    {
        <p>Loading...</p>
    }
    else if (FilteredBooks.Any())
    {
        <table class="table table-striped table-bordered table-responsive">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Genre(s)</th>
                    <th>Author</th>
                    <th class="col-date">Publication Year</th>
                    <th class="col-date">Read Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in DisplayedBooks)
                {
                    <tr>
                        <td data-label="Title">@((book.Title ?? "N/A"))</td>
                        <td data-label="Genre(s)">@((book.Genres != null ? string.Join(", ", book.Genres) : "N/A"))</td>
                        <td data-label="Author">@((book.Author ?? "N/A"))</td>
                        <td data-label="Publication Year">@((book.PublicationYear?.ToString() ?? "N/A"))</td>
                        <td data-label="Read Date">@((book.ReadDate?.ToString() ?? "N/A"))</td>
                        <td data-label="Status">@((book.Status ?? "N/A"))</td>
                        <td>
                            <div class="d-flex">
                                <div class="p-2">
                                    <button class="btn btn-danger" @onclick="() => DeleteBookAsync(book.ID)">Delete</button>
                                </div>
                                <div class="p-2">
                                    <button class="btn btn-info" @onclick="() => EditBookAsync(book.ID)">Edit</button>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <Paginator PageIndex="@currentPage" PageSize="@pageSize" TotalItems="@FilteredBooks.Count()" PageIndexChanged="PageIndexChanged" />
    }
    else
    {
        <p>No books in the library.</p>
    }
</div>

@code {
    private List<Book>? Books;
    private List<Book> FilteredBooks = new List<Book>();
    private List<Book> DisplayedBooks = new List<Book>();
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Books = (await BookService.GetAllBooksAsync())?.ToList();
            FilterBooks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
        }
    }

    private void FilterBooks()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            FilteredBooks = Books.ToList();
        }
        else
        {
            FilteredBooks = Books.Where(b =>
                b.Title?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                b.Author?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                (b.Genres != null && b.Genres.Any(g => g.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))) == true
            ).ToList();
        }

        UpdateDisplayedBooks();
    }

    private void UpdateDisplayedBooks()
    {
        int startIndex = (currentPage - 1) * pageSize;
        DisplayedBooks = FilteredBooks.Skip(startIndex).Take(pageSize).ToList();
    }

    private void PageIndexChanged(int newPageIndex)
    {
        currentPage = newPageIndex;
        UpdateDisplayedBooks();
    }

    private void ToAddNew()
    {
        NavigationManager.NavigateTo("/addbook");
    }

    private async Task DeleteBookAsync(int id)
    {
        try
        {
            await BookService.DeleteBookAsync(id);
            LoadBooks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting book: {ex.Message}");
        }
    }

    private async Task EditBookAsync(int id)
    {
        try
        {
            NavigationManager.NavigateTo($"/editbook/{id}");
            LoadBooks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing book: {ex.Message}");
        }
    }

    private async Task LoadBooks()
    {
        try
        {
            Books = (await BookService.GetAllBooksAsync())?.ToList();
            FilterBooks();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
        }
    }
}
