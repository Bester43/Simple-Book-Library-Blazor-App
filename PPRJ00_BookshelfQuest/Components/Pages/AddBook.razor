@page "/addbook"
@inject IBookService BookService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@rendermode InteractiveServer
@using System.Globalization

<h3>Add Book</h3>

<div class="form-group">
    <label for="googleBooksSearch">Search Google Books:</label>
    <div class="input-group">
        <input type="text" class="form-control" id="googleBooksSearch" @bind="searchQuery" />
        <button type="button" class="btn btn-primary" @onclick="SearchGoogleBooks">Search</button>
    </div>
</div>

@if (searchResults != null)
{
    <div>
        <h4>Search Results:</h4>
        @foreach (var book in searchResults)
        {
            <div>
                <strong>@book.Title</strong> by @book.Author
                <button type="button" class="btn btn-link" @onclick="() => SelectBook(book)">Select</button>
            </div>
        }
    </div>
}

<EditForm Model="@NewBook" OnValidSubmit="AddNewBook">
    <div class="form-group">
        <label for="title">Title*:</label>
        <InputText class="form-control" id="title" @bind-Value="NewBook.Title" required />
        <ValidationMessage For="@(() => NewBook.Title)" />
    </div>

    <div class="form-group">
        <label for="author">Author:</label>
        <InputText class="form-control" id="author" @bind-Value="NewBook.Author" />
        <ValidationMessage For="@(() => NewBook.Author)" />
    </div>

    <div class="form-group">
        <label for="genre">Genre:</label>
        <InputText class="form-control" id="genre" @bind-Value="GenresAsString" />
    </div>

    <div class="form-group">
        <label for="publicationYear">Publication Year:</label>
        <InputDate class="form-control" id="publicationYear" @bind-Value="NewBook.PublicationYear" />
        <ValidationMessage For="@(() => NewBook.PublicationYear)" />
    </div>

    <div class="form-group">
        <label for="bookStatus">Book Status:</label>
        <InputSelect class="form-control" id="bookStatus" @bind-Value="NewBook.Status">
            <option value="Want To Read">Want to Read</option>
            <option value="Currently Reading">Currently Reading</option>
            <option value="Read">Read</option>
        </InputSelect>
    </div>

    @if (NewBook.Status == "Read")
    {
        <div class="form-group d-flex align-items-center">
            <label for="readDate">Read Date:</label>
            <InputDate class="form-control" id="readDate" @bind-Value="NewBook.ReadDate" />
            <div class="ml-auto">
                <a @onclick="() => getday(0)" class="btn">Today</a>
                <a @onclick="() => getday(-1)" class="btn">Yesterday</a>
            </div>
        </div>
    }
    else
    {
        NewBook.ReadDate = null;
    }

    <button type="submit" class="btn btn-primary">Add Book</button>
</EditForm>

@code {
    private Book NewBook { get; set; } = new Book();
    private string searchQuery { get; set; }
    private List<Book> searchResults { get; set; }
    private List<string>? Genres { get; set; } = new List<string>();

    protected override void OnInitialized()
    {
        NewBook.ReadDate = DateOnly.FromDateTime(DateTime.Now.Date);
    }

    private void getday(int daysadd)
    {
        NewBook.ReadDate = DateOnly.FromDateTime(DateTime.Now.Date).AddDays(daysadd);
    }

    private async Task SearchGoogleBooks()
    {
        var apiKey = "YourGoogleBooksAPIKeyHere";
        var apiUrl = $"https://www.googleapis.com/books/v1/volumes?q={Uri.EscapeDataString(searchQuery)}&key={apiKey}";
        var response = await HttpClient.GetFromJsonAsync<GoogleBooksApiResponse>(apiUrl);

        if (response?.Items != null)
        {
            searchResults = response.Items.Select(item =>
            {
                var newBook = new Book
                    {
                        Title = item.VolumeInfo.Title,
                        Author = item.VolumeInfo.Authors?.FirstOrDefault(),
                        Genres = item.VolumeInfo.Categories?.ToList()
                    };

                if (DateTime.TryParseExact(item.VolumeInfo.PublishedDate, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var publishedDate))
                {
                    newBook.PublicationYear = DateOnly.FromDateTime(publishedDate);
                }

                return newBook;
            }).ToList();
        }
        else
        {
            searchResults = null;
        }
    }

    private void SelectBook(Book selectedBook)
    {
        NewBook.Title = selectedBook.Title;
        NewBook.Author = selectedBook.Author;
        NewBook.PublicationYear = selectedBook.PublicationYear;
        NewBook.Genres = selectedBook.Genres;
    }

    public class GoogleBooksApiResponse
    {
        public List<GoogleBookItem> Items { get; set; }
    }

    public class GoogleBookItem
    {
        public GoogleVolumeInfo VolumeInfo { get; set; }
    }

    public class GoogleVolumeInfo
    {
        public string Title { get; set; }
        public List<string> Authors { get; set; }
        public string PublishedDate { get; set; }
        public List<string>? Categories { get; set; } = ["N/A"];
    }

    private string GenresAsString
    {
        get => NewBook.Genres != null ? string.Join(", ", NewBook.Genres) : string.Empty;
        set => NewBook.Genres = !string.IsNullOrWhiteSpace(value) ? value.Split(',').Select(s => s.Trim()).ToList() : null;
    }

    private async Task AddNewBook()
    {
        if (NewBook.Status == null)
        {
            NewBook.Status = "Want To Read";
        }

        await BookService.AddBookAsync(NewBook);
        NavigationManager.NavigateTo("/library");
    }
}
